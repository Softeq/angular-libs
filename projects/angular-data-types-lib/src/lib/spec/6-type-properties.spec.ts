// Developed by Softeq Development Corporation
// http://www.softeq.com

import { Hash } from '@softeq/types';
import { getDataType, getDataTypeService, setupTestTypeModule } from './0-data-type-test-data.spec';
import { switchLocale } from 'test-data';
import { DataType, numberType } from '@softeq/data-types';
import { DATA_TYPE_INITIALIZER, DataTypeInitializer } from '../services/data-type-context.service';

describe('type properties', () => {
  let Types: Hash<DataType<any>>;

  beforeEach(() => {
    const TestWithName = numberType({
      properties: { name: 'Test' },
    });

    Types = {
      TestWithProperties: numberType({
        properties: {
          one: 123,
          two: 'abc',
        },
      }),
      TestWithName,
      SpecializedTest: numberType(TestWithName),
    };

    class TestDataTypeInitializer1 implements DataTypeInitializer {
      initType(type: DataType<any>): Hash<any> {
        if (type.properties.name) {
          return {
            nameUpperCase: type.properties.name.toUpperCase(),
          };
        }
      }
    }

    class TestDataTypeInitializer2 implements DataTypeInitializer {
      initType(type: DataType<any>): Hash<any> {
        if (type.properties.name) {
          return {
            nameLowerCase: type.properties.name.toLowerCase(),
          };
        }
      }
    }

    setupTestTypeModule({
      useStatic: true,
      typeSet: () => Types,
    }, {
      providers: [
        { provide: DATA_TYPE_INITIALIZER, useClass: TestDataTypeInitializer1, multi: true },
        { provide: DATA_TYPE_INITIALIZER, useClass: TestDataTypeInitializer2, multi: true },
      ],
    });

    // init SofteqDataTypeModule
    getDataTypeService();
  });

  it('each type should take properties from PrototypeType', () => {
    expect(Types.TestWithProperties.properties).toEqual({ one: 123, two: 'abc' });
  });

  it('DataTypeInitializer#initType should generate properties for type', () => {
    expect(Types.TestWithName.properties.nameUpperCase).toBe('TEST');
  });

  it('DataTypeInitializer#initType should generate properties for each type instance separately', () => {
    switchLocale('en-US');
    const usTest = getDataType(Types.TestWithName);
    switchLocale('en-AU');
    const auTest = getDataType(Types.TestWithName);
    expect(usTest.properties === auTest.properties).toBe(false);
    expect(usTest.properties).toEqual(auTest.properties);
  });

  it('properties generated by several DataTypeInitializers should be merged into type instance', () => {
    expect(Types.TestWithName.properties).toEqual({ name: 'Test', nameLowerCase: 'test', nameUpperCase: 'TEST' });
  });

  it('properties should not be inherited by specialized type', () => {
    expect(Types.SpecializedTest.properties).toEqual({});
  });
});
